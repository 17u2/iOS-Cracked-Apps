//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jul  5 2017 23:13:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class CLLocation, MQQHotspotConfiguratorCacheOperation, MQQHotspotConfiguratorDeliverResponseOperation, MQQHotspotConfiguratorServerOperation, MQQWiFi, NSArray, NSDate, NSDictionary, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSOperationQueue, NSRecursiveLock;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface MQQHotspotHelper : NSObject
{
    NSMutableArray *_delegates;
    NSRecursiveLock *_delegatesLock;
    NSObject<OS_dispatch_queue> *_handlerQueue;
    unsigned long long _backgroundTaskIdentifier;
    NSLock *_backgroundTaskLock;
    NSObject<OS_dispatch_source> *_checkConnectionTimer;
    NSMutableDictionary *_checkConnectionUserInfo;
    NSObject<OS_dispatch_queue> *_operationQueue;
    _Bool _supported;
    _Bool _registered;
    _Bool _enabled;
    NSDate *_lastHandledCommandTime;
    long long _lastHandledCommandType;
    NSArray *_lastScanedWiFiList;
    NSDate *_lastScanedTime;
    NSArray *_lastConfiguredWiFiList;
    NSDate *_lastConfiguredTime;
    MQQWiFi *_lastHandledWiFi;
    NSDictionary *_lastHandledWiFiInfo;
    long long _maxPasswordRequestCountPerDay;
    CLLocation *_currentLocation;
    NSDate *_locationUpdatedTime;
    NSOperationQueue *_configuratorOperationQueue;
    MQQHotspotConfiguratorCacheOperation *_configuratorCacheOperation;
    MQQHotspotConfiguratorServerOperation *_configuratorServerOperation;
    MQQHotspotConfiguratorDeliverResponseOperation *_configuratorDeliverResponseOperation;
    NSMutableSet *_configuredSSIDList;
    NSMutableSet *_configuredBSSIDList;
    long long _passwordRequestCountOfToday;
}

+ (id)defaultHelper;
+ (_Bool)isSupported;
@property(nonatomic) long long passwordRequestCountOfToday; // @synthesize passwordRequestCountOfToday=_passwordRequestCountOfToday;
@property(retain) NSMutableSet *configuredBSSIDList; // @synthesize configuredBSSIDList=_configuredBSSIDList;
@property(retain) NSMutableSet *configuredSSIDList; // @synthesize configuredSSIDList=_configuredSSIDList;
@property(retain) MQQHotspotConfiguratorDeliverResponseOperation *configuratorDeliverResponseOperation; // @synthesize configuratorDeliverResponseOperation=_configuratorDeliverResponseOperation;
@property(retain) MQQHotspotConfiguratorServerOperation *configuratorServerOperation; // @synthesize configuratorServerOperation=_configuratorServerOperation;
@property(retain) MQQHotspotConfiguratorCacheOperation *configuratorCacheOperation; // @synthesize configuratorCacheOperation=_configuratorCacheOperation;
@property(retain, nonatomic) NSOperationQueue *configuratorOperationQueue; // @synthesize configuratorOperationQueue=_configuratorOperationQueue;
@property(retain) NSDate *locationUpdatedTime; // @synthesize locationUpdatedTime=_locationUpdatedTime;
@property(retain) CLLocation *currentLocation; // @synthesize currentLocation=_currentLocation;
@property(nonatomic) long long maxPasswordRequestCountPerDay; // @synthesize maxPasswordRequestCountPerDay=_maxPasswordRequestCountPerDay;
@property(copy) NSDictionary *lastHandledWiFiInfo; // @synthesize lastHandledWiFiInfo=_lastHandledWiFiInfo;
@property(retain) MQQWiFi *lastHandledWiFi; // @synthesize lastHandledWiFi=_lastHandledWiFi;
@property(retain) NSDate *lastConfiguredTime; // @synthesize lastConfiguredTime=_lastConfiguredTime;
@property(copy) NSArray *lastConfiguredWiFiList; // @synthesize lastConfiguredWiFiList=_lastConfiguredWiFiList;
@property(retain) NSDate *lastScanedTime; // @synthesize lastScanedTime=_lastScanedTime;
@property(copy) NSArray *lastScanedWiFiList; // @synthesize lastScanedWiFiList=_lastScanedWiFiList;
@property long long lastHandledCommandType; // @synthesize lastHandledCommandType=_lastHandledCommandType;
@property(retain) NSDate *lastHandledCommandTime; // @synthesize lastHandledCommandTime=_lastHandledCommandTime;
@property _Bool enabled; // @synthesize enabled=_enabled;
@property(readonly, nonatomic) _Bool registered; // @synthesize registered=_registered;
@property(readonly, nonatomic) _Bool supported; // @synthesize supported=_supported;
- (void)enumerateDelegatesUsingBlock:(CDUnknownBlockType)arg1;
- (void)unregisterDelegate:(id)arg1;
- (void)registerDelegate:(id)arg1;
- (void)endBackgroundTask;
- (void)beginBackgroundTaskIfNeeded;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (_Bool)allowsToRequestWifiPasswordList;
- (void)refreshLocationWithInterval:(double)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)refreshLocationWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)containsConfiguredWiFis:(id)arg1;
- (void)initLastHandledWiFi;
- (void)updateLastHandledWiFi:(id)arg1;
- (_Bool)shouldSetConfidenceForNetwork:(id)arg1;
- (void)handleCommand5:(id)arg1;
- (void)handleCommand3:(id)arg1;
- (void)handleCommand2:(id)arg1;
- (void)configureWiFiList:(id)arg1 andDeliverResponseForCommand:(id)arg2;
- (void)cancelUnfinishedConfigurations;
- (void)deliverUnfinishedResponse;
- (void)handleCommand1:(id)arg1;
- (void)handleCommand:(id)arg1;
- (id)supportedWiFi;
- (_Bool)registerHotspotHelperWithOptions:(id)arg1;
@property(readonly, nonatomic) _Bool operating;
- (void)dealloc;
- (id)init;
- (void)deliverResponseOperation:(id)arg1 didDeliverResponseWithConfiguredWiFiList:(id)arg2;
- (void)deliverResponseOperation:(id)arg1 willDeliverResponseWithConfiguringWiFiList:(id)arg2;
- (void)serverOperation:(id)arg1 didFailToRequestWiFiList:(id)arg2;
- (void)serverOperation:(id)arg1 didFinishRequestingWiFiList:(id)arg2;
- (void)serverOperation:(id)arg1 willRequestWiFiList:(id)arg2;
- (void)cacheOperation:(id)arg1 didConfigureWiFiList:(id)arg2;
- (_Bool)isConfiguredWiFi:(id)arg1;
- (_Bool)isConfiguredNetwork:(id)arg1;
- (void)connection_applicationDidEnterBackground:(id)arg1;
- (void)connection_applicationWillEnterForeground:(id)arg1;
- (void)notifyWithWiFi:(id)arg1 WiFiStatus:(long long)arg2;
- (id)currentConnectedWiFi;
- (void)checkWifiConnected;
- (void)stopCheckingWifiConnected;
- (void)startCheckingWifiConnected:(id)arg1;

@end

