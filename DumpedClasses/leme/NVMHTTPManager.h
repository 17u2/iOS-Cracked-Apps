//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class AFHTTPRequestSerializer, AFHTTPSessionManager, AFJSONResponseSerializer, NSDictionary, NSObject<OS_dispatch_queue>, NSString;

@interface NVMHTTPManager : NSObject
{
    _Bool _allRequestsUseHTTPS;
    NSString *_hostName;
    NSDictionary *_HTTPRequestHeaders;
    NSString *_defaultXShardInfo;
    AFHTTPSessionManager *_defaultClient;
    AFHTTPRequestSerializer *_requestSerializer;
    AFJSONResponseSerializer *_responseSerializer;
    NSObject<OS_dispatch_queue> *_completionQueue;
}

+ (id)sharedManager;
+ (void)synchronizeToAPPGroupLocationInfo:(id)arg1;
+ (void)synchronizeToAPPGroupWithHost:(id)arg1 environment:(unsigned long long)arg2;
+ (id)deviceInfo;
+ (id)xShardInfo;
+ (void)updateHTTPManager;
+ (void)currentLocationChanged;
+ (void)userLocationDidUpdated:(id)arg1;
+ (id)extraHTTPHeaders;
+ (id)configuration;
+ (id)zeroAPIHostForEnv:(unsigned long long)arg1;
+ (void)nvm_configNetworkForEnv:(unsigned long long)arg1;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *completionQueue; // @synthesize completionQueue=_completionQueue;
@property(retain, nonatomic) AFJSONResponseSerializer *responseSerializer; // @synthesize responseSerializer=_responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer *requestSerializer; // @synthesize requestSerializer=_requestSerializer;
@property(retain, nonatomic) AFHTTPSessionManager *defaultClient; // @synthesize defaultClient=_defaultClient;
@property(copy, nonatomic) NSString *defaultXShardInfo; // @synthesize defaultXShardInfo=_defaultXShardInfo;
@property(copy, nonatomic) NSDictionary *HTTPRequestHeaders; // @synthesize HTTPRequestHeaders=_HTTPRequestHeaders;
@property(nonatomic) _Bool allRequestsUseHTTPS; // @synthesize allRequestsUseHTTPS=_allRequestsUseHTTPS;
@property(copy, nonatomic) NSString *hostName; // @synthesize hostName=_hostName;
- (void).cxx_destruct;
@property(nonatomic) double timeoutInterval; // @dynamic timeoutInterval;
- (void)handleRequest:(id)arg1 withResponse:(id)arg2 data:(id)arg3 error:(id)arg4;
- (void)wrapOnCompletionForRequestData:(id)arg1;
- (id)scheduleTaskForRequest:(id)arg1;
- (id)batchRequestsWithDatas:(id)arg1 trace:(id)arg2 didFinishedBlock:(CDUnknownBlockType)arg3;
- (id)batchRequestsWithDatas:(id)arg1 didFinishedBlock:(CDUnknownBlockType)arg2;
- (id)requestWithData:(id)arg1;
- (void)configManagerWithHostName:(id)arg1 sessionConfiguration:(id)arg2;
- (id)init;

@end

