//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NELivePlayer.h"

@class IJKSDLGLView, NELPDDFileLogger, NELPDDLogFileInfo, NELPNotificationManager, NELivePlayerMessagePool, NELivePlayerNGBUrl, NELivePlayerStatisticsLog, NSDictionary, NSMutableArray, NSObject<OS_dispatch_semaphore>, NSObject<OS_dispatch_source>, NSString, NSTimer, UIView;

@interface NELivePlayerController : NSObject <NELivePlayer>
{
    struct IjkMediaPlayer *_mediaPlayer;
    IJKSDLGLView *_glView;
    NELivePlayerMessagePool *_msgPool;
    NSString *_urlString;
    long long _videoWidth;
    long long _videoHeight;
    long long _sampleAspectRatioNumerator;
    long long _sampleAspectRatioDenominator;
    _Bool _seeking;
    long long _bufferingTime;
    long long _bufferingPosition;
    long long _bufferingProgress;
    long long _buffering_duration;
    double _fpsInMeta;
    double _fpsAtOutput;
    long long _vbitrate;
    const char *_vcodec_name;
    const char *_vcodec_long_name;
    const char *_acodec_type;
    long long _samplerate;
    long long _numOfChannels;
    long long _abitrate;
    _Bool _keepScreenOnWhilePlaying;
    _Bool _pauseInBackground;
    _Bool _isVideoToolboxOpen;
    _Bool _playingBeforeInterruption;
    _Bool _openVideoToolBox;
    NELPNotificationManager *_notificationManager;
    struct AVAppAsyncStatistic _asyncStat;
    int _scalingMode;
    NSObject<OS_dispatch_source> *_statisticTimer;
    NELivePlayerStatisticsLog *statisticsLog;
    _Bool mSendStatisticsLog;
    long long mStatisticsInterval;
    long long STATISTICS_NUM;
    long long SEND_STATISTICS_LOG_INTERVAL;
    NSTimer *timer;
    NSString *mPrintTime;
    NSString *mCreateTime;
    NSString *mDeviceID;
    NSString *mNetworkType;
    NSString *mOperator;
    NSString *mSessionID;
    NSString *mSDKVersion;
    NSString *mMediaFileName;
    _Bool mHardwareDecoder;
    NSString *mCDNType;
    NSString *mRequestID;
    NSMutableArray *mStatisticsPrintTimeArray;
    NSMutableArray *mStatisticsVideoReceiveBitRateArray;
    NSMutableArray *mStatisticsVideoReceiveFrameRateArray;
    NSMutableArray *mStatisticsVideoPlayFrameRateArray;
    NSMutableArray *mStatisticsAudioReceiveBitRateArray;
    NSMutableArray *mStatisticsBlockNumberArray;
    NSMutableArray *mStatisticsFlushBufferNumberArray;
    NSString *mVideoRes;
    NSMutableArray *mStatisticsVideoDecoderTypeArray;
    NSMutableArray *mStatisticsBufferingDurationArray;
    long long mNum;
    NELivePlayerStatisticsLog *mNELPStatisticsLog;
    _Bool mFirst;
    _Bool isNeteaseURL;
    int launch_delay;
    int buffer_time;
    _Bool getNGBFlag;
    NELivePlayerNGBUrl *_ngbUrl;
    _Bool _isPullUrlInited;
    NSString *_ngbPullUrl;
    NSString *_pullUrl;
    NSString *liveplayerUrl;
    struct __sFILE *fp;
    struct BufferParam BufferParam;
    struct BufferParam *bufferParam;
    NELPDDFileLogger *_fileLogger;
    NELPDDLogFileInfo *_fileLoggerInfo;
    struct _NSRange range_live;
    struct _NSRange range_vod;
    _Bool urlSwitched;
    _Bool isRTMP;
    _Bool isHTTP;
    _Bool firstFlag;
    _Bool buffering_started;
    _Bool buffering_msg_send;
    long long buffering_start_time;
    long long buffering_end_time;
    float bufferingDurationT;
    NSObject<OS_dispatch_semaphore> *_nelpBufferSemaphore;
    NSObject<OS_dispatch_source> *_adjustBufferStatusTimer;
    _Bool _isPreparedToPlay;
    _Bool _shouldAutoplay;
    int _playbackState;
    int _loadState;
    UIView *_view;
    double currentPlaybackTime;
    double duration;
    double playableDuration;
    NSDictionary *_mediaMeta;
    NSDictionary *_videoMeta;
    NSDictionary *_audioMeta;
}

+ (void)setLogLevel:(int)arg1;
+ (void)setLogReport:(_Bool)arg1;
+ (id)nmvideo_playerWithURL:(id)arg1;
@property(readonly, nonatomic) NSDictionary *audioMeta; // @synthesize audioMeta=_audioMeta;
@property(readonly, nonatomic) NSDictionary *videoMeta; // @synthesize videoMeta=_videoMeta;
@property(readonly, nonatomic) NSDictionary *mediaMeta; // @synthesize mediaMeta=_mediaMeta;
@property(readonly, nonatomic) int loadState; // @synthesize loadState=_loadState;
@property(readonly, nonatomic) _Bool isPreparedToPlay; // @synthesize isPreparedToPlay=_isPreparedToPlay;
@property(readonly, nonatomic) UIView *view; // @synthesize view=_view;
- (void).cxx_destruct;
- (void)setStatisticsLog:(_Bool)arg1;
- (void)getStatisticsLog;
- (void)sendConnectionStatus:(_Bool)arg1;
- (void)setStatistics;
- (void)adjustBufferStatus;
- (void)adjustBufferSize;
- (void)adjustJitterBuffer;
- (void)setLogPath;
- (char *)getLogPath;
- (void)setPlaybackTimeout:(long long)arg1;
- (void)setVolume:(float)arg1;
- (void)isLogToFile:(_Bool)arg1;
- (void)getAudioQueue:(struct NELPAudioQueue *)arg1;
- (void)getAudioInfo:(struct NELPAudioInfo *)arg1;
- (void)getVideoInfo:(struct NELPVideoInfo *)arg1;
- (id)getSnapshot;
- (void)setBufferStrategy:(int)arg1;
- (void)setMute:(_Bool)arg1;
- (void)setPlaybackSpeed:(float)arg1;
- (void)setHardwareDecoder:(_Bool)arg1;
- (void)applicationWillTerminate;
- (void)applicationDidEnterBackground;
- (void)applicationWillResignActive;
- (void)applicationDidBecomeActive;
- (void)applicationWillEnterForeground;
- (void)audioSessionInterrupt:(id)arg1;
- (void)unregisterApplicationObservers;
- (void)registerApplicationObservers;
- (void)setMaxBufferSize:(int)arg1;
- (void)setPlayerOptionIntValue:(long long)arg1 forKey:(id)arg2;
- (void)setSwsOptionIntValue:(long long)arg1 forKey:(id)arg2;
- (void)setCodecOptionIntValue:(long long)arg1 forKey:(id)arg2;
- (void)setFormatOptionIntValue:(long long)arg1 forKey:(id)arg2;
- (void)setPlayerOptionValue:(id)arg1 forKey:(id)arg2;
- (void)setSwsOptionValue:(id)arg1 forKey:(id)arg2;
- (void)setCodecOptionValue:(id)arg1 forKey:(id)arg2;
- (void)setFormatOptionValue:(id)arg1 forKey:(id)arg2;
- (id)obtainMessage;
- (void)postEvent:(id)arg1;
- (float)playbackRate;
- (void)setPlaybackRate:(float)arg1;
- (double)fpsAtOutput;
- (id)thumbnailImageAtCurrentTime;
- (void)setScalingMode:(int)arg1;
- (void)changeNaturalSize;
@property(readonly, nonatomic) double playableDuration; // @synthesize playableDuration;
@property(readonly, nonatomic) double duration; // @synthesize duration;
@property(nonatomic) double currentPlaybackTime; // @synthesize currentPlaybackTime;
@property(readonly, nonatomic) int playbackState; // @synthesize playbackState=_playbackState;
- (void)switchUrl:(id)arg1;
- (void)reset;
- (void)didShutdown;
- (void)shutdownClose:(id)arg1;
- (void)shutdownWaitStop:(id)arg1;
- (void)shutdown;
- (void)setOptionIntValue:(long long)arg1 forKey:(id)arg2 ofCategory:(int)arg3;
- (void)setOptionValue:(id)arg1 forKey:(id)arg2 ofCategory:(int)arg3;
- (_Bool)isVideoToolboxOpen;
- (void)setPauseInBackground:(_Bool)arg1;
- (_Bool)isPlaying;
- (void)stop;
- (void)pause;
- (void)play;
- (void)prepareToPlay;
@property(nonatomic) _Bool shouldAutoplay; // @synthesize shouldAutoplay=_shouldAutoplay;
- (void)dealloc;
- (void)setScreenOn:(_Bool)arg1;
- (id)getPrintTime;
- (id)initWithContentURLString:(id)arg1 withOptions:(id)arg2;
- (id)initWithContentURL:(id)arg1 withOptions:(id)arg2;
- (id)initWithContentURL:(id)arg1;
- (id)getSDKVersion;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

