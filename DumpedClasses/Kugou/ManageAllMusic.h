//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSString;

@interface ManageAllMusic : NSObject
{
    NSString *_musicname;
    NSString *_singer;
    NSString *_albumname;
    NSString *_musicpath;
    NSString *_musichash;
    long long _musicid;
    double _musictime;
    long long _musicattribution;
    double _filesize;
    int _bitrate;
    double _mp3Filesize;
    double _m4aFilesize;
    NSString *_superHash;
    double _superSize;
}

+ (_Bool)deleteAllOldShareSongsWithTransaction;
+ (_Bool)deleteAllOldShareSongs;
+ (_Bool)deleteLocalMusicByName:(id)arg1;
+ (_Bool)deleteLocalMusicByPath:(id)arg1;
+ (_Bool)deleteMusicByPath:(id)arg1;
+ (_Bool)deleteMusicByName:(id)arg1;
+ (int)findDownLoadedMusicCount;
+ (id)downLoadedSongsNoAddTime;
+ (id)downLoadedSongsDesHasingAddTime;
+ (id)downLoadedSongsDes;
+ (id)allCacheSongsNoAddTime;
+ (id)allCacheSongsDesHasingAddTime;
+ (int)findCountBySinger;
+ (_Bool)deleteMusicByAttributionID:(int)arg1;
+ (_Bool)deleteAllIPodMusic;
+ (_Bool)deleteMusic:(int)arg1;
+ (_Bool)deleteOfflineMusic:(id)arg1;
+ (_Bool)addMusicWithTransaction:(id)arg1 Singer:(id)arg2 AlbumName:(id)arg3 MusicPath:(id)arg4 MusicHash:(id)arg5 MusicTime:(double)arg6 MusicAttribution:(long long)arg7 fileSize:(double)arg8 bitRate:(int)arg9 mp3FileSize:(double)arg10 m4aFileSize:(double)arg11 modifiedDate:(id)arg12 superMp3Hash:(id)arg13 superMp3FileSize:(double)arg14 sqHash:(id)arg15 sqSize:(double)arg16;
+ (_Bool)addMusicWithTransaction:(id)arg1 Singer:(id)arg2 AlbumName:(id)arg3 MusicPath:(id)arg4 MusicHash:(id)arg5 MusicTime:(double)arg6 MusicAttribution:(long long)arg7 fileSize:(double)arg8 bitRate:(int)arg9 mp3FileSize:(double)arg10 m4aFileSize:(double)arg11 modifiedDate:(id)arg12 superMp3Hash:(id)arg13 superMp3FileSize:(double)arg14;
+ (_Bool)createWithMusicName:(id)arg1 Singer:(id)arg2 AlbumName:(id)arg3 MusicPath:(id)arg4 MusicHash:(id)arg5 MusicTime:(double)arg6 MusicAttribution:(long long)arg7 fileSize:(double)arg8 bitRate:(int)arg9 mp3FileSize:(double)arg10 m4aFileSize:(double)arg11 modifiedDate:(id)arg12 superMp3Hash:(id)arg13 superMp3FileSize:(double)arg14 SQHash:(id)arg15 SQSize:(double)arg16;
+ (_Bool)createWithMusicName:(id)arg1 Singer:(id)arg2 AlbumName:(id)arg3 MusicPath:(id)arg4 MusicHash:(id)arg5 MusicTime:(double)arg6 MusicAttribution:(long long)arg7 fileSize:(double)arg8 bitRate:(int)arg9 mp3FileSize:(double)arg10 m4aFileSize:(double)arg11 modifiedDate:(id)arg12 superMp3Hash:(id)arg13 superMp3FileSize:(double)arg14;
+ (_Bool)upDataMusicArtist:(id)arg1 value:(id)arg2;
+ (_Bool)upDataMusicName:(id)arg1 Singer:(id)arg2 AlbumName:(id)arg3 MusicPath:(id)arg4 MusicHash:(id)arg5 MusicID:(int)arg6 MusicTime:(double)arg7;
+ (int)MuID;
+ (int)iPodcount;
+ (int)count;
+ (id)find:(long long)arg1;
+ (int)findMusicCountByOwer:(int)arg1;
+ (id)findMusicByOwer:(int)arg1;
+ (id)findMusicsByOwer:(int)arg1;
+ (id)findKgMusicPath;
+ (void)createAllmusicTable;
+ (int)findMusicIDbyPath:(id)arg1;
+ (_Bool)isMusicExist:(id)arg1 andValue:(id)arg2;
+ (id)findMusicBy:(id)arg1 AndValue:(id)arg2;
+ (_Bool)isLocalMusicExistByLikeName:(id)arg1;
+ (_Bool)isLocalMusicExist:(id)arg1;
+ (_Bool)isLocalMusicExistByFileName:(id)arg1;
+ (_Bool)isiPodMusicExistByPath:(id)arg1;
+ (_Bool)isLocalMusicExistByPath:(id)arg1;
+ (_Bool)isLocalMusicExistByHash:(id)arg1 andPath:(id)arg2;
+ (_Bool)isOfflineMusicExistByHash:(id)arg1;
+ (_Bool)isLocalMusicExistByHash:(id)arg1;
+ (id)createOfflineMusicByName:(id)arg1;
+ (id)createShareSongByName:(id)arg1;
+ (id)createLocalMusicByName:(id)arg1;
+ (id)createLocalMusicByHash:(id)arg1;
+ (id)createMusicInfoKey:(id)arg1 andValue:(id)arg2;
+ (id)createMusicInfoByPath:(id)arg1;
+ (id)allmusicTableName;
- (double)superSize;
- (id)superHash;
- (double)M4aFileSize;
- (double)Mp3FileSize;
- (int)BitRate;
- (double)FileSize;
- (long long)MusicAttribution;
- (double)MusicTime;
- (int)MusicID;
- (id)MusicHash;
- (id)MusicPath;
- (id)AlbumName;
- (id)Singer;
- (void)setMusicName:(id)arg1;
- (id)MusicName;
- (id)initWithMusicName:(id)arg1 Singer:(id)arg2 AlbumName:(id)arg3 MusicPath:(id)arg4 MusicHash:(id)arg5 MusicID:(long long)arg6 MusicTime:(double)arg7 MusicAttribution:(long long)arg8 fileSize:(double)arg9 bitRate:(int)arg10 mp3FileSize:(double)arg11 m4aFileSize:(double)arg12 superHash:(id)arg13 superSize:(double)arg14;

@end

