//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class KTVGiftHttpDAO, KTVKZoneHttpDAO, KTVListenWorkHttpDAO, KTVOpusModel, KtvAccompanyHttpADO;

@interface KTVOpusBaseNetHelper : NSObject
{
    _Bool canBackStatue;
    _Bool isZanStatusSuccess;
    _Bool isFocusStatusSuccess;
    KTVOpusModel *_opusModel;
    KTVListenWorkHttpDAO *_dynamicHttp;
    KTVKZoneHttpDAO *_opusGethttp;
    KtvAccompanyHttpADO *_songHttpRequest;
    KTVOpusModel *_opusModelForSongUrlGet;
    KTVGiftHttpDAO *_giftHttpDAO;
    CDUnknownBlockType _opusGetCompleteBlock;
    CDUnknownBlockType _songUrlGetCompleteBlock;
}

@property(copy, nonatomic) CDUnknownBlockType songUrlGetCompleteBlock; // @synthesize songUrlGetCompleteBlock=_songUrlGetCompleteBlock;
@property(copy, nonatomic) CDUnknownBlockType opusGetCompleteBlock; // @synthesize opusGetCompleteBlock=_opusGetCompleteBlock;
@property(retain, nonatomic) KTVGiftHttpDAO *giftHttpDAO; // @synthesize giftHttpDAO=_giftHttpDAO;
@property(retain, nonatomic) KTVOpusModel *opusModelForSongUrlGet; // @synthesize opusModelForSongUrlGet=_opusModelForSongUrlGet;
@property(retain, nonatomic) KtvAccompanyHttpADO *songHttpRequest; // @synthesize songHttpRequest=_songHttpRequest;
@property(retain, nonatomic) KTVKZoneHttpDAO *opusGethttp; // @synthesize opusGethttp=_opusGethttp;
@property(retain, nonatomic) KTVListenWorkHttpDAO *dynamicHttp; // @synthesize dynamicHttp=_dynamicHttp;
@property(retain, nonatomic) KTVOpusModel *opusModel; // @synthesize opusModel=_opusModel;
- (void).cxx_destruct;
- (void)getGiftDevotePlayerForOpus:(id)arg1 page:(long long)arg2 pageSize:(long long)arg3 needSelf:(long long)arg4 complete:(CDUnknownBlockType)arg5;
- (void)getTopGiftPlayerForOpus:(id)arg1 N:(long long)arg2 complete:(CDUnknownBlockType)arg3;
- (void)getSongUrlFailure:(id)arg1;
- (void)getSongUrlSuccess:(id)arg1;
- (void)getOpusPlayUrlString:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)deleteCommentForOpus:(id)arg1 commetId:(long long)arg2 complete:(CDUnknownBlockType)arg3;
- (void)addCommentForOpus:(id)arg1 withMessager:(id)arg2 complete:(CDUnknownBlockType)arg3;
- (void)forwardAOpus:(id)arg1 withContent:(id)arg2 complete:(CDUnknownBlockType)arg3;
- (void)removeFavoriteForOpus:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)addFavoriteForOpus:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)addPraiseForOpus:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getPraisesForOpus:(id)arg1 withNumber:(long long)arg2 complete:(CDUnknownBlockType)arg3;
- (void)getCommentsForOpus:(id)arg1 withNumber:(long long)arg2 complete:(CDUnknownBlockType)arg3;
- (void)updateCommentsForOpus:(id)arg1 withNumber:(long long)arg2 complete:(CDUnknownBlockType)arg3;
- (void)loadChorusPlayerStatusForOpusModel:(id)arg1 commplete:(CDUnknownBlockType)arg2;
- (void)loadInviterPlayerStatusForOpusModel:(id)arg1 commplete:(CDUnknownBlockType)arg2;
- (void)getOpusStatusFailure:(id)arg1;
- (void)getOpusStatusSuccess:(id)arg1;
- (void)loadOpusStatusForId:(id)arg1 commplete:(CDUnknownBlockType)arg2;
- (void)checkCanBack;
- (void)getOpusInfoFailure:(id)arg1;
- (void)getOpusInfoSuccess:(id)arg1;
- (void)loadOpusForId:(id)arg1 commplete:(CDUnknownBlockType)arg2;

@end

